#!/bin/bash

# @Author yasuhiro.yamada
# @Filename tmssh
readonly VERSION="1.3"

set -e

# THIS_FILE_NAME is supposed to be "tmssh".
readonly THIS_FILE_NAME="${0##*/}"
readonly ABS_THIS_FILE_NAME="$(cd $(dirname $0) && pwd)/$THIS_FILE_NAME"

# This is supposed to be tmssh-12345(PID)
readonly SESSION_NAME="$THIS_FILE_NAME-$$"

readonly SSH_CMD="ssh -o StrictHostKeyChecking=no"

# Temporary window name is tmp-12345(PID)
readonly TMP_WIN_NAME="tmp-$$"
readonly TMP_FILE="$HOME/.$THIS_FILE_NAME-tmp"
readonly TMP_SOCKET="$HOME/.$THIS_FILE_NAME-socket"

# Initialize parameters
hosts=()
options=()
WIN_NAME="$TMP_WIN_NAME"
LOG_STORE_FLG=0
LOG_DIR="$HOME/.$THIS_FILE_NAME-logs"
LOG_FORMAT="[:HOST:].log.%Y-%m-%d_%H-%M-%S"

# In case of error, remove tmp file.
trap "rm -f $TMP_FILE" ERR
trap "rm -f $TMP_SOCKET" ERR

usage() {
    echo "Usage:"
    echo "  $THIS_FILE_NAME <USER NAME>@<SERVER NAME> [<USER NAME>@<SERVER NAME> ...]"
    echo "Options:"
    echo "  -h --help                    Show this screen."
    echo "  -v --version                 Show version."
    echo "  -l                           Enable logging and store log files to $LOG_DIR"
    echo "  -L --log=<directory>         Enable logging and store log files to <directory>."
    echo "     --log-format=<format>     Format of log file names."
    # echo "  -S --session=<file>          Specify tmux session file to be generated."
}

version() {
    echo "$THIS_FILE_NAME $VERSION"
}

#
# Generate log file names from given arguments.
# Usage:
#        echo <host1> <host2> ... | log_filenames <FORMAT>
# Return:
#        File names.
# FORMAT:
#        Interpreted sequences are:
#        [:PID:]   Process id of the tmux session. (e.g, 41531)
#        [:HOST:]  Host name to which the pane is logging in. (e.g, userA@serverA)
#
#        In addition, sequences same as `date` command are available.
#
#        For example:
#        %Y   year  (e.g, 1960)
#        %m   month (e.g, 01)
#        %d   date  (e.g, 31)
#        And etc.
#        Basically, please refer to date(1) manual.
#
# Example:
#        $ echo aaa bbb ccc aaa ccc ccc | xargs -n 1 | log_filenames '[:HOST:]_[:PID:]_%Y%m%d.log'
#        aaa-1_1234_20160101.log
#        bbb-1_1234_20160101.log
#        ccc-1_1234_20160101.log
#        aaa-2_1234_20160101.log
#        ccc-2_1234_20160101.log
#        ccc-3_1234_20160101.log
#
log_filenames () {
    local _arg_fmt="$1"
    local _full_fmt=$(date '+'$_arg_fmt)
    cat | perl -nle 'print $_."_".(($h{$_}++)+1)' | while read host ; do
        echo $_full_fmt | \
        sed "s/\[:HOST:\]/$host/g" | \
        sed "s/\[:PID:\]/$$/g"
    done
}

dircheck() {
    local _dir="$1"
    # Check directory.
    if [ ! -e "${_dir}" ]; then
        if mkdir "${_dir}"; then
            echo "${_dir} is created." >&2
        else
            echo "Failed to create ${_dir}" >&2
            exit 1
        fi
    fi
    if [ ! -d "${_dir}" ]; then
        echo "${_dir} is not directory." >&2
        exit 1
    fi
    if [ ! -w "${_dir}" ]; then
        echo "${_dir} is not writable." >&2
        exit 1
    fi
}

# Convert array to string which is can be used as command line argument.
# Usage:
#       arr2args <array object>
# Example:
#       array=(aaa bbb "ccc ddd" eee "f'f")
#       arr2args "${array[@]}"
#       @returns "'aaa' 'bbb' 'ccc ddd' 'eee' 'f\'f'"
# Result:
arr2args() {
    local _arr=($@)
    local _arg=""
    # If there is no argument, usage will be shown.
    if [ $# -lt 1 ]; then
        return 0
    fi
    for i in $( seq 0 $(( $# - 1)) ) ;do
        _arg=${_arr[i]}
        printf "'${_arg//\'/\\\'}' "
    done
}

DEBUG_FILE=~/work/tmssh.debug
# DEBUG_FILE=/dev/null
debug() {
    echo "[Debug] $1" | tee >> $DEBUG_FILE
}

#
# Split a new window which was created by tmux into multiple panes.
# Usage:
#        run_split <USER1@HOST1> <USER2@HOST2> ... <WINDOW NAME>
#
run_split()
{
    local _pane_base_index=$(tmux show-window-options -g | grep '^pane-base-index' | head -n 1 | perl -anle 'print $F[1]')
    local _hosts=($@)
    local _last_host_idx=$(($# - 1))
    local _window_name="$WIN_NAME"

    debug "LOGDIR run_split: $LOG_DIR"
    # ".0" means a pane which has the youngest number of index.
    tmux select-pane -t ${_window_name}.${_pane_base_index}

    for i in $(seq 0 $_last_host_idx)
    do
        debug "i=$i: tmux split-window -t ${_window_name} -h -d"
        tmux split-window -t ${_window_name} -h -d
        tmux select-layout even-horizontal

        # Restraining that size of pane's width becomes
        # less than the minimum size which is defined by tmux.
        if [ $i -ge 2 ]; then
            debug "i=$i: tmux select-layout -t ${_window_name} tiled"
            tmux select-layout -t ${_window_name} tiled
        fi
    done

    # Delete the first window
    tmux kill-pane -t ${_window_name}.${_pane_base_index}

    # Select second window
    tmux select-pane -t ${_window_name}.${_pane_base_index}

    : "Log file operations" && {
        if [ $LOG_STORE_FLG -eq 1 ]; then
            # Generate log files from host list.
            local _logfiles=($(
            for i in $(seq 0 $_last_host_idx)
            do
                echo "${_hosts[i]}"
            done | log_filenames "$LOG_FORMAT"
            ))
            for i in $(seq 0 $_last_host_idx)
            do
                # Start logging
                debug "LIGDIR print: cat >> '${LOG_DIR}/${_logfiles[i]}'"
                tmux pipe-pane -t ${_window_name}.$(($i + ${_pane_base_index})) "cat >> '${LOG_DIR}/${_logfiles[i]}'"
            done
        fi
    }

    # Sending ssh opearations for each pane.
    for i in $(seq 0 $_last_host_idx)
    do
        tmux send-keys -t $_window_name.$(($i + ${_pane_base_index})) "${SSH_CMD} ${_hosts[i]}" C-m
    done

    # Window is serarated vertically, when the number of panes is 1 or 2.
    # This is just the author's preference (You can remove next five lines.)
    if [ $_last_host_idx -eq 1 ]; then
        tmux select-layout -t ${_window_name} even-horizontal
    elif [ $_last_host_idx -gt 1 ]; then
        tmux select-layout -t ${_window_name} tiled
    fi

    # Enable broadcasting
    tmux set-window-option -t ${_window_name} synchronize-panes on
}

# If there is no argument, usage will be shown.
if [ $# -lt 1 ]; then
    usage
    exit 1
fi


while (( $# > 0 ))
do
    case "$1" in

        # Long options
        --help)
            usage
            exit 0
            ;;
        --version)
            version
            exit 0
            ;;
        --log=*)
            options=("${options[@]}" "$1")
            LOG_STORE_FLG=1
            LOG_DIR="${1#--log=}"
            debug "LOGDIR arg: $LOG_DIR"
            shift
            ;;
        --log-format=*)
            options=("${options[@]}" "$1")
            LOG_STORE_FLG=1
            LOG_FORMAT="${1#--log-format=}"
            shift
            ;;
#        --session=*)
#            SESSION_FLG=1
#            SESSION_FILE="${1#--session=}"
#            shift
#            ;;

        # Short options
        -*)
            if [[ "$1" =~ 'h' ]]; then
                usage
                exit 0
            fi
            if [[ "$1" =~ 'v' ]]; then
                version
                exit 0
            fi
            if [[ "$1" =~ 'l' ]]; then
                options=("${options[@]}" "$1")
                LOG_STORE_FLG=1
            fi
            if [[ "$1" =~ 'L' ]]; then
                options=("${options[@]}" "$1")
                LOG_STORE_FLG=1
                shift
                options=("${options[@]}" "$1")
                LOG_DIR="$1"
            fi
#            if [[ "$1" =~ 'S' ]]; then
#                SESSION_FLG=1
#                shift
#                SESSION_FILE="$1"
#            fi
            shift
            ;;

        # Hosts
        *)
            hosts=("${hosts[@]}" "$1")
            shift
            ;;
    esac
done


: "Argument Validations" && {
    # Validate log directory.
    if [ $LOG_STORE_FLG -eq 1 ]; then
        # Remove end of slash '/'
        LOG_DIR="${LOG_DIR%/}"

        # tilda expansion
        LOG_DIR="${LOG_DIR/#~/$HOME}"

        # Ensure its existance
        dircheck "$LOG_DIR"

        # absolute path
        LOG_DIR="$(cd "$LOG_DIR" && pwd)"
    fi
    if [ ${#hosts[@]} -le 0 ]; then
        echo 'Specify hosts.'  >&2
        exit 1
    fi
    debug "LOGDIR validation: $LOG_DIR"
}

#
# If current shell is already in tmux session.
#
if [ -n "$TMUX" ]; then

    # Extract first field separated by dot '.'
    # ex, $1       =  aaa.bbb.ccc
    #     WIN_NAME => aaa-12345(PID)
    WIN_NAME=$(echo "${hosts[0]}" | perl -F'\.' -anle 'printf "$F[0]"')"-$$"

    # Create new window.
    tmux new-window -n "$WIN_NAME"

    # Spilit the window.
    debug "run_split ${hosts[@]}"
    run_split "${hosts[@]}"

    # Remove original window.
    if [ -e $TMP_FILE ]; then
        tmux kill-window -t `cat $TMP_FILE && rm -f $TMP_FILE`
    fi


#
# If current shell is NOT in tmux session.
#
else
    # Safely create tmp file (named pipe)
    rm -f $TMP_FILE
    mkfifo $TMP_FILE

    # Store the windowname to the tmp file.
    echo -n "$TMP_WIN_NAME" > $TMP_FILE &

    # Create new session.
    tmux -S $TMP_SOCKET new-session -s $SESSION_NAME -n $TMP_WIN_NAME -d

    _hosts4args=$(arr2args "${hosts[@]}")
    _opts4args=$(arr2args "${options[@]}")
    debug "tmux -S $TMP_SOCKET send-keys -t $SESSION_NAME:$TMP_WIN_NAME \"$ABS_THIS_FILE_NAME $_opts4args $_hosts4args\" C-m"
    tmux -S $TMP_SOCKET send-keys -t $SESSION_NAME:$TMP_WIN_NAME "$ABS_THIS_FILE_NAME $_opts4args $_hosts4args" C-m

    # Go to another condition of this if statement.
    tmux -S $TMP_SOCKET attach-session -t $SESSION_NAME
fi

exit 0
