#!/bin/bash

# @Author yasuhiro.yamada
# @Filename tmssh

set -e

# THIS_FILE_NAME is supposed to be "tmssh".
readonly THIS_FILE_NAME="${0##*/}"
readonly ABS_THIS_FILE_NAME="$(cd $(dirname $0) && pwd)/$THIS_FILE_NAME"

# This is supposed to be tmssh-12345(PID)
readonly SESSION_NAME="$THIS_FILE_NAME-$$"

# Extract first field separated by dot '.'
# ex, $1       =  aaa.bbb.ccc
#     WIN_NAME => aaa-12345(PID)
readonly WIN_NAME="$(echo "$1" | perl -F'\.' -pae '$_="$F[0]\n"')-$$"

# Temporary window name is tmp-12345(PID)
readonly TMP_WIN_NAME="tmp-$$"
readonly TMP_FILE="$HOME/.tmssh-tmp"
readonly TMP_SOCKET="$HOME/.tmssh-socket"

# In case of error, remove tmp file.
trap "rm -f $TMP_FILE" ERR
trap "rm -f $TMP_SOCKET" ERR

function usage() {
    echo "Usage: $THIS_FILE_NAME <USER NAME>@<SERVER NAME> [<USER NAME>@<SERVER NAME> ...]"
}

#
# Generate log file names from given arguments.
# Usage:
#        echo <host1> <host2> ... | log_filenames <format>
# Return:
#        File names.
# Example:
#        $ echo aaa bbb ccc aaa ccc ccc | xargs -n 1 | log_filenames '[:HOST:]_[:PID:]_%Y%m%d.log'
#        aaa-1_1234_20160101.log
#        bbb-1_1234_20160101.log
#        ccc-1_1234_20160101.log
#        aaa-2_1234_20160101.log
#        ccc-2_1234_20160101.log
#        ccc-3_1234_20160101.log
#
function log_filenames () {
    local _arg_fmt=${1:-[:HOST:]_[:PID:]_%Y%m%d.log}
    local _full_fmt=$(date '+'$_arg_fmt)
    cat | perl -nle 'print $_."_".(($h{$_}++)+1)' | while read host ; do
        echo $_full_fmt | \
        sed "s/\[:HOST:\]/$host/g" | \
        sed "s/\[:PID:\]/$$/g"
    done
}

#
# Split a new window which was created by tmux into multiple panes.
# Usage:
#        split_window <USER1@HOST1> <USER2@HOST2> ... <WINDOW NAME>
#
function split_window()
{
    local _hosts=($@)
    local _last_host_idx=$(($# - 1))
    local _window_name=${_hosts[$_last_host_idx]}

    # ".0" means a pane which has the youngest number of index.
    tmux select-pane -t ${_window_name}.0

    for i in $(seq 1 $_last_host_idx)
    do
        tmux split-window -t ${_window_name} -h -d
        tmux select-layout even-horizontal

        # Restraining that size of pane's width becomes
        # less than the minimum size which is defined by tmux.
        if [ $i -gt 2 ]; then
            tmux select-layout -t ${_window_name} tiled
        fi
    done

    # Delete the first window
    tmux kill-pane -t ${_window_name}.0

    # Select second window
    tmux select-pane -t ${_window_name}.0

    : "Log file operations" && {
        # Generate log files from host list.
        local _logfile=($(
            for i in $(seq 1 $_last_host_idx)
            do
                echo "${_hosts[i]}"
            done | log_filenames
        ))

        for i in $(seq 0 $(($_last_host_idx-1)))
        do
            # Start logging
            tmux pipe-pane -t $_window_name.$i "cat >> $HOME/.tmux/${_logfile[i]}"
        done
    }

    # Sending ssh opearations for each pane.
    for i in $(seq 0 $(($_last_host_idx-1)))
    do
        tmux send-keys -t $_window_name.$i "ssh ${_hosts[i]}" C-m
    done

    # Window is serarated vertically, when the number of panes is 1 or 2.
    # This is just the author's preference (You can remove next five lines.)
    if [ $_last_host_idx -eq 2 ]; then
        tmux select-layout -t ${_window_name} even-horizontal
    elif [ $_last_host_idx -gt 2 ]; then
        tmux select-layout -t ${_window_name} tiled
    fi

    # Enable broadcasting
    tmux set-window-option -t ${_window_name} synchronize-panes on
}

# If there is no argument, usage will be shown.
if [ $# -lt 1 ]; then
    usage
    exit 1
fi

#
# If current shell is already in tmux session.
#
if [ -n "$TMUX" ]; then
    # Create new window.
    tmux new-window -n "$WIN_NAME"

    # Spilit the window.
    split_window $* "$WIN_NAME"

    # Remove original window.
    if [ -e $TMP_FILE ]; then
        tmux kill-window -t `cat $TMP_FILE && rm -f $TMP_FILE`
    fi
else

#
# If current shell is NOT in tmux session.
#
    # Safely create tmp file (named pipe)
    rm -f $TMP_FILE
    mkfifo $TMP_FILE

    # Store the windowname to the tmp file.
    echo -n "$TMP_WIN_NAME" > $TMP_FILE &

    # Create new session.
    tmux -S $TMP_SOCKET new-session -s $SESSION_NAME -n $TMP_WIN_NAME -d

    # Store this session name to the tmp file so that this session will able to be killed.
    tmux -S $TMP_SOCKET send-keys -t $SESSION_NAME:$TMP_WIN_NAME "$ABS_THIS_FILE_NAME $*" C-m

    # Go to another condition of this if statement.
    tmux -S $TMP_SOCKET attach-session -t $SESSION_NAME
fi

exit 0
